#!/bin/sh

set -u

config=$(cat -)
file=$(echo "$config" | jq -r '."source"')
resources=$(echo "$config" | jq -r '."resources"')
language=$(echo "$config" | jq -r '."natural_language"')

hadolint_args=""

for filename in .hadolint.yml .hadolint.yaml hadolint.yml hadolint.yaml
do
  filename="$resources/$filename"
  if [ -f "$filename" ]; then
    hadolint_args="--config=$filename"
    break
  fi
done

if [ "$language" = "nl" ]; then
  title="Gerenderd"
  empty="Lege oplossing"
  linter_fail="Linter is gestopt met errors"
  build_fail="Docker build is gefaald"
else
  title="Rendered"
  empty="Empty submission"
  linter_fail="Linter exited with errors"
  build_fail="Docker build failed"
fi

echo '{"command": "start-judgement"}'
echo "{\"command\": \"start-tab\", \"title\": \"$title\"}"

if [ -s "$file" ]; then
  fail="$(mktemp)"
  if { HADOLINT_NOFAIL=1 hadolint $hadolint_args --format json "$file" || echo > "$fail"; } |
     jq '.[] | .column -= 1 | .command = "annotate-code" | .row = .line - 1 | .text = .message | .type = if .level == "style" or .level == "ignore" then "info" else .level end | del(.code, .file, .line, .level, .message)' \
    && [ -s "$fail" ]
  then
    echo "{\"command\": \"escalate-status\", \"status\": {\"enum\": \"wrong\", \"human\": \"$linter_fail\"}}"
  fi
  rm "$fail"

  if ! err=$(/kaniko/executor -v error --no-push --no-push-cache -f "$file" 2>&1 > /dev/null); then
    jq --null-input \
      --arg description "$err" \
    '{"command": "append-message", "message": {"format": "callout-danger", "description": $description}}'
    echo "{\"command\": \"escalate-status\", \"status\": {\"enum\": \"wrong\", \"human\": \"$build_fail\"}}"
  fi
else
  echo "{\"command\": \"escalate-status\", \"status\": {\"enum\": \"wrong\", \"human\": \"$empty\"}}"
fi

echo '{"command": "close-tab"}'
echo '{"command": "close-judgement"}'
